// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wayne/load_pool_response.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LoadPoolResponse struct {
	Id               uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Asset            string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	CollatoralFactor int32  `protobuf:"varint,3,opt,name=collatoralFactor,proto3" json:"collatoralFactor,omitempty"`
	Liquidity        int32  `protobuf:"varint,4,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	DepositApy       int32  `protobuf:"varint,5,opt,name=depositApy,proto3" json:"depositApy,omitempty"`
	BorrowApy        int32  `protobuf:"varint,6,opt,name=borrowApy,proto3" json:"borrowApy,omitempty"`
	Creator          string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *LoadPoolResponse) Reset()         { *m = LoadPoolResponse{} }
func (m *LoadPoolResponse) String() string { return proto.CompactTextString(m) }
func (*LoadPoolResponse) ProtoMessage()    {}
func (*LoadPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df6f4a0fad4d0e5, []int{0}
}
func (m *LoadPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadPoolResponse.Merge(m, src)
}
func (m *LoadPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoadPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadPoolResponse proto.InternalMessageInfo

func (m *LoadPoolResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LoadPoolResponse) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *LoadPoolResponse) GetCollatoralFactor() int32 {
	if m != nil {
		return m.CollatoralFactor
	}
	return 0
}

func (m *LoadPoolResponse) GetLiquidity() int32 {
	if m != nil {
		return m.Liquidity
	}
	return 0
}

func (m *LoadPoolResponse) GetDepositApy() int32 {
	if m != nil {
		return m.DepositApy
	}
	return 0
}

func (m *LoadPoolResponse) GetBorrowApy() int32 {
	if m != nil {
		return m.BorrowApy
	}
	return 0
}

func (m *LoadPoolResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*LoadPoolResponse)(nil), "cosmonaut.wayne.wayne.LoadPoolResponse")
}

func init() { proto.RegisterFile("wayne/load_pool_response.proto", fileDescriptor_4df6f4a0fad4d0e5) }

var fileDescriptor_4df6f4a0fad4d0e5 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4b, 0xc4, 0x30,
	0x1c, 0xc5, 0x9b, 0x7a, 0xbd, 0xe3, 0x32, 0xc8, 0x11, 0x14, 0x32, 0x48, 0x28, 0x4e, 0xc5, 0xa1,
	0x1d, 0xfc, 0x04, 0xde, 0xe0, 0xe4, 0x20, 0x1d, 0x5d, 0x8e, 0xb4, 0x09, 0x1a, 0xc8, 0xf5, 0x1f,
	0x93, 0x94, 0xb3, 0xdf, 0xc2, 0x8f, 0xe5, 0x78, 0xa3, 0x38, 0x49, 0xfb, 0x45, 0xa4, 0xe9, 0x79,
	0x0a, 0xb7, 0x24, 0xbc, 0xdf, 0x7b, 0x8f, 0x84, 0x87, 0xd9, 0x8e, 0x77, 0x8d, 0x2c, 0x34, 0x70,
	0xb1, 0x31, 0x00, 0x7a, 0x63, 0xa5, 0x33, 0xd0, 0x38, 0x99, 0x1b, 0x0b, 0x1e, 0xc8, 0x65, 0x0d,
	0x6e, 0x0b, 0x0d, 0x6f, 0x7d, 0x1e, 0x92, 0xd3, 0x79, 0xfd, 0x85, 0xf0, 0xea, 0x01, 0xb8, 0x78,
	0x04, 0xd0, 0xe5, 0xa1, 0x41, 0xce, 0x71, 0xac, 0x04, 0x45, 0x29, 0xca, 0x66, 0x65, 0xac, 0x04,
	0xb9, 0xc0, 0x09, 0x77, 0x4e, 0x7a, 0x1a, 0xa7, 0x28, 0x5b, 0x96, 0x93, 0x20, 0x37, 0x78, 0x55,
	0x83, 0xd6, 0xdc, 0x83, 0xe5, 0xfa, 0x9e, 0xd7, 0x1e, 0x2c, 0x3d, 0x4b, 0x51, 0x96, 0x94, 0x27,
	0x9c, 0x5c, 0xe1, 0xa5, 0x56, 0xaf, 0xad, 0x12, 0xca, 0x77, 0x74, 0x16, 0x42, 0x7f, 0x80, 0x30,
	0x8c, 0x85, 0x34, 0xe0, 0x94, 0xbf, 0x33, 0x1d, 0x4d, 0x82, 0xfd, 0x8f, 0x8c, 0xed, 0x0a, 0xac,
	0x85, 0xdd, 0x68, 0xcf, 0xa7, 0xf6, 0x11, 0x10, 0x8a, 0x17, 0xb5, 0x95, 0xe3, 0x73, 0x74, 0x11,
	0xfe, 0xf7, 0x2b, 0xd7, 0xeb, 0x8f, 0x9e, 0xa1, 0x7d, 0xcf, 0xd0, 0x77, 0xcf, 0xd0, 0xfb, 0xc0,
	0xa2, 0xfd, 0xc0, 0xa2, 0xcf, 0x81, 0x45, 0x4f, 0xd9, 0xb3, 0xf2, 0x2f, 0x6d, 0x95, 0xd7, 0xb0,
	0x2d, 0x8e, 0xc3, 0x14, 0xd3, 0x84, 0x6f, 0x87, 0xdb, 0x77, 0x46, 0xba, 0x6a, 0x1e, 0xe6, 0xbb,
	0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x04, 0xf8, 0x33, 0xf4, 0x60, 0x01, 0x00, 0x00,
}

func (m *LoadPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLoadPoolResponse(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.BorrowApy != 0 {
		i = encodeVarintLoadPoolResponse(dAtA, i, uint64(m.BorrowApy))
		i--
		dAtA[i] = 0x30
	}
	if m.DepositApy != 0 {
		i = encodeVarintLoadPoolResponse(dAtA, i, uint64(m.DepositApy))
		i--
		dAtA[i] = 0x28
	}
	if m.Liquidity != 0 {
		i = encodeVarintLoadPoolResponse(dAtA, i, uint64(m.Liquidity))
		i--
		dAtA[i] = 0x20
	}
	if m.CollatoralFactor != 0 {
		i = encodeVarintLoadPoolResponse(dAtA, i, uint64(m.CollatoralFactor))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintLoadPoolResponse(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLoadPoolResponse(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLoadPoolResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoadPoolResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoadPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLoadPoolResponse(uint64(m.Id))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovLoadPoolResponse(uint64(l))
	}
	if m.CollatoralFactor != 0 {
		n += 1 + sovLoadPoolResponse(uint64(m.CollatoralFactor))
	}
	if m.Liquidity != 0 {
		n += 1 + sovLoadPoolResponse(uint64(m.Liquidity))
	}
	if m.DepositApy != 0 {
		n += 1 + sovLoadPoolResponse(uint64(m.DepositApy))
	}
	if m.BorrowApy != 0 {
		n += 1 + sovLoadPoolResponse(uint64(m.BorrowApy))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLoadPoolResponse(uint64(l))
	}
	return n
}

func sovLoadPoolResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoadPoolResponse(x uint64) (n int) {
	return sovLoadPoolResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoadPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadPoolResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadPoolResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadPoolResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadPoolResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadPoolResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollatoralFactor", wireType)
			}
			m.CollatoralFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadPoolResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollatoralFactor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			m.Liquidity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadPoolResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liquidity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositApy", wireType)
			}
			m.DepositApy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadPoolResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositApy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowApy", wireType)
			}
			m.BorrowApy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadPoolResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowApy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadPoolResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadPoolResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadPoolResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoadPoolResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoadPoolResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoadPoolResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoadPoolResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoadPoolResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoadPoolResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoadPoolResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLoadPoolResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLoadPoolResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLoadPoolResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoadPoolResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLoadPoolResponse = fmt.Errorf("proto: unexpected end of group")
)
